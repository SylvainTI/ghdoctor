#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GHDoctor.Core
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="GHDoctor")]
	public partial class GHDoctorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCommonQuery(CommonQuery instance);
    partial void UpdateCommonQuery(CommonQuery instance);
    partial void DeleteCommonQuery(CommonQuery instance);
    #endregion
		
		public GHDoctorDataContext() : 
				base(global::GHDoctor.Core.Properties.Settings.Default.GHDoctorConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public GHDoctorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GHDoctorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GHDoctorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GHDoctorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CommonQuery> CommonQueries
		{
			get
			{
				return this.GetTable<CommonQuery>();
			}
		}
	}
	
	[Table(Name="dbo.CATEGORY")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _ShortDescription;
		
		private string _LongDescription;
		
		private EntitySet<CommonQuery> _CommonQueries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    #endregion
		
		public Category()
		{
			this._CommonQueries = new EntitySet<CommonQuery>(new Action<CommonQuery>(this.attach_CommonQueries), new Action<CommonQuery>(this.detach_CommonQueries));
			OnCreated();
		}
		
		[Column(Name="CODE", Storage="_Code", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Name="SHORT_DESCRIPTION", Storage="_ShortDescription", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[Column(Name="LONG_DESCRIPTION", Storage="_LongDescription", DbType="VarChar(500)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Category_CommonQuery", Storage="_CommonQueries", ThisKey="Code", OtherKey="CategoryCode")]
		internal EntitySet<CommonQuery> CommonQueries
		{
			get
			{
				return this._CommonQueries;
			}
			set
			{
				this._CommonQueries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommonQueries(CommonQuery entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CommonQueries(CommonQuery entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.COMMONQUERIES")]
	public partial class CommonQuery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Code;
		
		private int _CategoryCode;
		
		private string _ShortDescription;
		
		private string _Description;
		
		private string _SearchString;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(long value);
    partial void OnCodeChanged();
    partial void OnCategoryCodeChanging(int value);
    partial void OnCategoryCodeChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSearchStringChanging(string value);
    partial void OnSearchStringChanged();
    #endregion
		
		public CommonQuery()
		{
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[Column(Name="CODE", Storage="_Code", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Name="CATEGORY_CODE", Storage="_CategoryCode", DbType="Int NOT NULL")]
		public int CategoryCode
		{
			get
			{
				return this._CategoryCode;
			}
			set
			{
				if ((this._CategoryCode != value))
				{
					this.OnCategoryCodeChanging(value);
					this.SendPropertyChanging();
					this._CategoryCode = value;
					this.SendPropertyChanged("CategoryCode");
					this.OnCategoryCodeChanged();
				}
			}
		}
		
		[Column(Name="SHORT_DESCRIPTION", Storage="_ShortDescription", DbType="VarChar(50)")]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[Column(Name="DESCRIPTION", Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="SEARCH_STRING", Storage="_SearchString", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string SearchString
		{
			get
			{
				return this._SearchString;
			}
			set
			{
				if ((this._SearchString != value))
				{
					this.OnSearchStringChanging(value);
					this.SendPropertyChanging();
					this._SearchString = value;
					this.SendPropertyChanged("SearchString");
					this.OnSearchStringChanged();
				}
			}
		}
		
		[Association(Name="Category_CommonQuery", Storage="_Category", ThisKey="CategoryCode", OtherKey="Code", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CommonQueries.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CommonQueries.Add(this);
						this._CategoryCode = value.Code;
					}
					else
					{
						this._CategoryCode = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
